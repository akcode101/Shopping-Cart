{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","_ref","totalCounters","fullCost","console","log","react_default","a","createElement","className","href","Counter","styles","fontSize","fontWeight","doHandleIncrement","_this","handleIncrement","id","prevProps","prevState","counter","value","this","props","_this2","classes","getBadgeClasses","formatCount","onClick","onIncrement","onDecrement","onDelete","Component","Counters","_this$props","onReset","counters","onNewCounter","map","components_counter","key","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","possibleId","totalCost","toConsumableArray","index","indexOf","objectSpread","cost","setState","handleDecrement","handleReset","c","handleDelete","counterId","correctCounter","find","currentCost","removedCost","filter","handleNew","push","newId","Fragment","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c8a9b3c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst NavBar = ({ totalCounters, fullCost }) => {\r\n  console.log(\"Navbar-rendered\");\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Navbar{\" \"}\r\n        <span className=\"badge badge-pill badge-secondary\">\r\n          Total Number of Items: {totalCounters} ; Total Cost of Items: $\r\n          {fullCost}\r\n        </span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n// class NavBar extends Component {\r\n//   //state = {};\r\n//   render() {\r\n//     return (\r\n//       <nav className=\"navbar navbar-light bg-light\">\r\n//         <a className=\"navbar-brand\" href=\"#\">\r\n//           Navbar{\" \"}\r\n//           <span className=\"badge badge-pill badge-secondary\">\r\n//             {this.props.totalCounters}\r\n//           </span>\r\n//         </a>\r\n//       </nav>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport Price from \"./counter\";\r\n\r\nclass Counter extends Component {\r\n  //   state = {\r\n  //     value: this.props.counter.value\r\n  //     //imageUrl: \"https://picsum.photos/200\",\r\n  //     //tags: [\"tag1\", \"tag2\", \"tag3\"]\r\n  //   };\r\n\r\n  //   constructor() {\r\n  //     super();\r\n  //     this.handleIncrement = this.handleIncrement.bind(this);\r\n  //   }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log(\"previous props\", prevProps);\r\n    console.log(\"previous state\", prevState);\r\n    if (prevProps.counter.value !== this.props.counter.value) {\r\n      //Ajax call and get new data from the server\r\n    }\r\n  }\r\n\r\n  componentWillUnmonut() {\r\n    console.log(\"Component will unmount\");\r\n  }\r\n\r\n  styles = {\r\n    fontSize: \"10\",\r\n    fontWeight: \"bold\"\r\n  };\r\n\r\n  //   renderTags() {\r\n  //     if (this.state.tags.length === 0) return <p>There are no tags!</p>;\r\n  //     return (\r\n  //       <ul>\r\n  //         {this.state.tags.map(tag => (\r\n  //           <li key={tag}>{tag}</li>\r\n  //         ))}\r\n  //       </ul>\r\n  //     );\r\n  //   }\r\n\r\n  //   handleIncrement = product => {\r\n  //     //console.log(\"Button was incremented!\", this);\r\n  //     console.log(product);\r\n  //     this.setState({ value: this.state.value + 1 });\r\n  //   };\r\n\r\n  doHandleIncrement = () => {\r\n    this.handleIncrement({ id: 1 });\r\n  };\r\n\r\n  render() {\r\n    //console.log(\"props\", this.props);\r\n    //console.log(this.props);\r\n    console.log(\"Counter-rendered\");\r\n    let classes = this.getBadgeClasses();\r\n    return (\r\n      <div>\r\n        {/* {this.props.children} */}\r\n        <price className=\"m-10\"> </price>\r\n        <span className={classes}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          //onClick={() => this.handleIncrement(product)}\r\n          className=\"btn btn-secondary btn-sm m-2\"\r\n        >\r\n          Increment Price ($)\r\n        </button>\r\n        {/*\r\n        <ul>\r\n          {this.state.tags.map(tag => (\r\n            <li key={tag}>{tag}</li>\r\n          ))}\r\n        </ul>\r\n        \r\n        {this.state.tags.length === 0 && \"Please create a new tag!\"}\r\n        {this.renderTags()}\r\n        */}\r\n        <button\r\n          onClick={() => this.props.onDecrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm m-2\"\r\n        >\r\n          Decrement Price ($)\r\n        </button>\r\n\r\n        <button\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n        >\r\n          Delete Item\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \" badge m-2 badge-\";\r\n    classes += this.props.counter.value <= 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value } = this.props.counter;\r\n    //return value === 0 ? <h1>Zero</h1> : value;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    console.log(\"Counters-rendered\");\r\n    const {\r\n      onReset,\r\n      counters,\r\n      onDelete,\r\n      onIncrement,\r\n      onDecrement,\r\n      onNewCounter\r\n    } = this.props;\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\r\n          Reset\r\n        </button>\r\n\r\n        <button onClick={onNewCounter} className=\"btn btn-primary btn-sm m-2\">\r\n          Add new counter!\r\n        </button>\r\n        {counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            // value={counter.value}\r\n            // id={counter.id}\r\n            // selected={counter.selected}\r\n            counter={counter}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            onDecrement={onDecrement}\r\n            onNewCounter={onNewCounter}\r\n          >\r\n            {/* <h4>Counter #{counter.id}</h4> */}\r\n          </Counter>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n//selected attribute not needed\r\n","import React, { Component } from \"react\";\n\nimport NavBar from \"./components/navbar\";\nimport \"./App.css\";\nimport Counter from \"./components/counter\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ],\n    possibleId: 5,\n    totalCost: 0\n  };\n\n  // constructor(props) {\n  //   super(props);\n  //   console.log(\"App-Constructor\", this.props);\n  // }\n\n  constructor() {\n    super();\n    console.log(\"App-Constructor\");\n  }\n\n  componentDidMount() {\n    //Ajax call\n    //this.setState({movie})\n    console.log(\"App-Mounted\");\n  }\n\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    var cost = this.state.totalCost;\n    cost++;\n    this.setState({ counters: counters, totalCost: cost });\n  };\n\n  handleDecrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value--;\n    var cost = this.state.totalCost;\n    cost--;\n    this.setState({ counters: counters, totalCost: cost });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n\n    this.setState({ counters: counters, totalCost: 0 });\n  };\n\n  handleDelete = counterId => {\n    //console.log(\"Event Handler Called\", counterId);\n    const correctCounter = this.state.counters.find(c => c.id == counterId);\n    const currentCost = this.state.totalCost;\n    const removedCost = correctCounter.value;\n    const counters = this.state.counters.filter(c => c.id != counterId);\n    this.setState({ counters: counters, totalCost: currentCost - removedCost }); //{counters}\n  };\n\n  handleNew = () => {\n    const counters = this.state.counters;\n    counters.push({ id: this.state.possibleId, value: 0 });\n    const newId = this.state.possibleId + 1;\n    this.setState({ counters: counters, possibleId: newId });\n  };\n  render() {\n    console.log(\"App-rendered\");\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n          fullCost={this.state.totalCost}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onDelete={this.handleDelete}\n            onIncrement={this.handleIncrement}\n            onDecrement={this.handleDecrement}\n            onNewCounter={this.handleNew}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Counter from \"./components/counter\";\nimport Counters from \"./components/counters\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}